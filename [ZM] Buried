#include common_scripts\utility;
#include maps\mp\_utility;
#include maps\mp\zombies\_zm_utility;
#include maps\mp\gametypes_zm\_hud_util;
#include maps\mp\gametypes_zm\_hud_message;
#include maps\mp\zombies\_zm_perks;

main()
{   	
	replacefunc(maps\mp\zombies\_zm_perks::perk_machine_spawn_init, ::new_perk_machine_spawn_init);
        replacefunc(maps\mp\zombies\_zm_banking::onplayerconnect_bank_deposit_box, ::new_onplayerconnect_bank_deposit_box);
}

init()
{ 
    thread remove_perk_limit();    
    for(;;)
    {
        level waittill("connected", player);
        player thread welcome();
        create_dvar("hardcore", 0);
    }
}

remove_perk_limit()
{
    level waittill( "start_of_round" );
    level.perk_purchase_limit = 9;
}

welcome()
{
    self endon("disconnect");
    self waittill("spawned_player");
    self thread zombie_counter();
    self thread set_fridge_weapon();
    self thread hardcore();
    self SetClientDvars("player_backSpeedScale", "1", "player_strafeSpeedScale", "1");
}

zombie_counter()
{
  flag_wait( "initial_blackscreen_passed" );  
  if (getDvarInt("hardcore") == 0)
  {
    self.zombiecounter = createfontstring( "Objective", 1.7 );
    self.zombiecounter setpoint( "LEFT", "CENTER", -424, -230 );
    self.zombiecounter.alpha = 1;
    self.zombiecounter.hidewheninmenu = 1;
    self.zombiecounter.hidewhendead = 1;
    self.zombiecounter.label = &"^1";
    for(;;)
    {
        if(isdefined(self.afterlife) && self.afterlife){
            self.zombiecounter.alpha = 0.2;
        } else {
            self.zombiecounter.alpha = 1;
        }
        self.zombiecounter setvalue( level.zombie_total + get_current_zombie_count() );
        wait 0.05;
    }  
  }
}

hardcore()
{
            if (getDvarInt("hardcore") == 1)
            {
                self SetClientDvar( "cg_drawCrosshair", 0 );
                set_zombie_var( "zombie_between_round_time", 5 );
		timer = level.zombie_vars["zombie_spawn_delay"];
		if ( timer > 0.08 )
		{
			level.zombie_vars["zombie_spawn_delay"] = timer * 0.90;
		}
		else if ( timer < 0.08 )
		{
			level.zombie_vars["zombie_spawn_delay"] = 0.08;
		}
            }
}

set_fridge_weapon()
{	
            if (getDvarInt("hardcore") == 0)
            {
		self setdstat( "PlayerStatsByMap", "zm_transit", "weaponLocker", "name", "an94_zm" );
		self setdstat( "PlayerStatsByMap", "zm_transit", "weaponLocker", "stock", 300 );
		self setdstat( "PlayerStatsByMap", "zm_transit", "weaponLocker", "clip", 30 );	
            }
            else if (getDvarInt("hardcore") == 1)
            {
		self setdstat( "PlayerStatsByMap", "zm_transit", "weaponLocker", "name", "undefined" );
		self setdstat( "PlayerStatsByMap", "zm_transit", "weaponLocker", "stock", 0 );
		self setdstat( "PlayerStatsByMap", "zm_transit", "weaponLocker", "clip", 0 );	
            }
}

new_onplayerconnect_bank_deposit_box()
{
            if (getDvarInt("hardcore") == 0)
            {
              self.account_value = 5;	
            }
            else if (getDvarInt("hardcore") == 1)
            {
	      self.account_value = 0;
            }
}

new_perk_machine_spawn_init()
{
    match_string = "";
    location = level.scr_zm_map_start_location;

    if ( ( location == "default" || location == "" ) && isdefined( level.default_start_location ) )
        location = level.default_start_location;

    match_string = level.scr_zm_ui_gametype + "_perks_" + location;
    pos = [];

    if ( isdefined( level.override_perk_targetname ) )
        structs = getstructarray( level.override_perk_targetname, "targetname" );
    else
        structs = getstructarray( "zm_perk_machine", "targetname" );

    foreach ( struct in structs )
    {
        if ( isdefined( struct.script_string ) )
        {
            tokens = strtok( struct.script_string, " " );

            foreach ( token in tokens )
            {
                if ( token == match_string )
                    pos[pos.size] = struct;
            }

            continue;
        }

        pos[pos.size] = struct;
    }

    if ( !isdefined( pos ) || pos.size == 0 )
        return;

    precachemodel( "zm_collision_perks1" );

    for ( i = 0; i < pos.size; i++ )
    {
        perk = pos[i].script_noteworthy;

        if ( isdefined( perk ) && isdefined( pos[i].model ) )
        {
            use_trigger = spawn( "trigger_radius_use", pos[i].origin + vectorscale( ( 0, 0, 1 ), 30.0 ), 0, 40, 70 );
            use_trigger.targetname = "zombie_vending";
            use_trigger.script_noteworthy = perk;
            use_trigger triggerignoreteam();
            use_trigger thread givepoints();
            perk_machine = spawn( "script_model", pos[i].origin );
            perk_machine.angles = pos[i].angles;
            perk_machine setmodel( pos[i].model );

            if ( isdefined( level._no_vending_machine_bump_trigs ) && level._no_vending_machine_bump_trigs )
                bump_trigger = undefined;
            else
            {
                bump_trigger = spawn( "trigger_radius", pos[i].origin, 0, 35, 64 );
                bump_trigger.script_activated = 1;
                bump_trigger.script_sound = "zmb_perks_bump_bottle";
                bump_trigger.targetname = "audio_bump_trigger";

                if ( perk != "specialty_weapupgrade" )
                    bump_trigger thread thread_bump_trigger();
            }

            collision = spawn( "script_model", pos[i].origin, 1 );
            collision.angles = pos[i].angles;
            collision setmodel( "zm_collision_perks1" );
            collision.script_noteworthy = "clip";
            collision disconnectpaths();
            use_trigger.clip = collision;
            use_trigger.machine = perk_machine;
            use_trigger.bump = bump_trigger;

            if ( isdefined( pos[i].blocker_model ) )
                use_trigger.blocker_model = pos[i].blocker_model;

            if ( isdefined( pos[i].script_int ) )
                perk_machine.script_int = pos[i].script_int;

            if ( isdefined( pos[i].turn_on_notify ) )
                perk_machine.turn_on_notify = pos[i].turn_on_notify;

            switch ( perk )
            {
                case "specialty_quickrevive":
                case "specialty_quickrevive_upgrade":
                    use_trigger.script_sound = "mus_perks_revive_jingle";
                    use_trigger.script_string = "revive_perk";
                    use_trigger.script_label = "mus_perks_revive_sting";
                    use_trigger.target = "vending_revive";
                    perk_machine.script_string = "revive_perk";
                    perk_machine.targetname = "vending_revive";

                    if ( isdefined( bump_trigger ) )
                        bump_trigger.script_string = "revive_perk";

                    break;
                case "specialty_fastreload":
                case "specialty_fastreload_upgrade":
                    use_trigger.script_sound = "mus_perks_speed_jingle";
                    use_trigger.script_string = "speedcola_perk";
                    use_trigger.script_label = "mus_perks_speed_sting";
                    use_trigger.target = "vending_sleight";
                    perk_machine.script_string = "speedcola_perk";
                    perk_machine.targetname = "vending_sleight";

                    if ( isdefined( bump_trigger ) )
                        bump_trigger.script_string = "speedcola_perk";

                    break;
                case "specialty_longersprint":
                case "specialty_longersprint_upgrade":
                    use_trigger.script_sound = "mus_perks_stamin_jingle";
                    use_trigger.script_string = "marathon_perk";
                    use_trigger.script_label = "mus_perks_stamin_sting";
                    use_trigger.target = "vending_marathon";
                    perk_machine.script_string = "marathon_perk";
                    perk_machine.targetname = "vending_marathon";

                    if ( isdefined( bump_trigger ) )
                        bump_trigger.script_string = "marathon_perk";

                    break;
                case "specialty_armorvest":
                case "specialty_armorvest_upgrade":
                    use_trigger.script_sound = "mus_perks_jugganog_jingle";
                    use_trigger.script_string = "jugg_perk";
                    use_trigger.script_label = "mus_perks_jugganog_sting";
                    use_trigger.longjinglewait = 1;
                    use_trigger.target = "vending_jugg";
                    perk_machine.script_string = "jugg_perk";
                    perk_machine.targetname = "vending_jugg";

                    if ( isdefined( bump_trigger ) )
                        bump_trigger.script_string = "jugg_perk";

                    break;
                case "specialty_scavenger":
                case "specialty_scavenger_upgrade":
                    use_trigger.script_sound = "mus_perks_tombstone_jingle";
                    use_trigger.script_string = "tombstone_perk";
                    use_trigger.script_label = "mus_perks_tombstone_sting";
                    use_trigger.target = "vending_tombstone";
                    perk_machine.script_string = "tombstone_perk";
                    perk_machine.targetname = "vending_tombstone";

                    if ( isdefined( bump_trigger ) )
                        bump_trigger.script_string = "tombstone_perk";

                    break;
                case "specialty_rof":
                case "specialty_rof_upgrade":
                    use_trigger.script_sound = "mus_perks_doubletap_jingle";
                    use_trigger.script_string = "tap_perk";
                    use_trigger.script_label = "mus_perks_doubletap_sting";
                    use_trigger.target = "vending_doubletap";
                    perk_machine.script_string = "tap_perk";
                    perk_machine.targetname = "vending_doubletap";

                    if ( isdefined( bump_trigger ) )
                        bump_trigger.script_string = "tap_perk";

                    break;
                case "specialty_finalstand":
                case "specialty_finalstand_upgrade":
                    use_trigger.script_sound = "mus_perks_whoswho_jingle";
                    use_trigger.script_string = "tap_perk";
                    use_trigger.script_label = "mus_perks_whoswho_sting";
                    use_trigger.target = "vending_chugabud";
                    perk_machine.script_string = "tap_perk";
                    perk_machine.targetname = "vending_chugabud";

                    if ( isdefined( bump_trigger ) )
                        bump_trigger.script_string = "tap_perk";

                    break;
                case "specialty_additionalprimaryweapon":
                case "specialty_additionalprimaryweapon_upgrade":
                    use_trigger.script_sound = "mus_perks_mulekick_jingle";
                    use_trigger.script_string = "tap_perk";
                    use_trigger.script_label = "mus_perks_mulekick_sting";
                    use_trigger.target = "vending_additionalprimaryweapon";
                    perk_machine.script_string = "tap_perk";
                    perk_machine.targetname = "vending_additionalprimaryweapon";

                    if ( isdefined( bump_trigger ) )
                        bump_trigger.script_string = "tap_perk";

                    break;
                case "specialty_weapupgrade":
                    use_trigger.target = "vending_packapunch";
                    use_trigger.script_sound = "mus_perks_packa_jingle";
                    use_trigger.script_label = "mus_perks_packa_sting";
                    use_trigger.longjinglewait = 1;
                    perk_machine.targetname = "vending_packapunch";
                    flag_pos = getstruct( pos[i].target, "targetname" );

                    if ( isdefined( flag_pos ) )
                    {
                        perk_machine_flag = spawn( "script_model", flag_pos.origin );
                        perk_machine_flag.angles = flag_pos.angles;
                        perk_machine_flag setmodel( flag_pos.model );
                        perk_machine_flag.targetname = "pack_flag";
                        perk_machine.target = "pack_flag";
                    }

                    if ( isdefined( bump_trigger ) )
                        bump_trigger.script_string = "perks_rattle";

                    break;
                case "specialty_deadshot":
                case "specialty_deadshot_upgrade":
                    use_trigger.script_sound = "mus_perks_deadshot_jingle";
                    use_trigger.script_string = "deadshot_perk";
                    use_trigger.script_label = "mus_perks_deadshot_sting";
                    use_trigger.target = "vending_deadshot";
                    perk_machine.script_string = "deadshot_vending";
                    perk_machine.targetname = "vending_deadshot_model";

                    if ( isdefined( bump_trigger ) )
                        bump_trigger.script_string = "deadshot_vending";

                    break;
                default:
                    use_trigger.script_sound = "mus_perks_speed_jingle";
                    use_trigger.script_string = "speedcola_perk";
                    use_trigger.script_label = "mus_perks_speed_sting";
                    use_trigger.target = "vending_sleight";
                    perk_machine.script_string = "speedcola_perk";
                    perk_machine.targetname = "vending_sleight";

                    if ( isdefined( bump_trigger ) )
                        bump_trigger.script_string = "speedcola_perk";

                    break;
            }

            if ( isdefined( level._custom_perks[perk] ) && isdefined( level._custom_perks[perk].perk_machine_set_kvps ) )
                [[ level._custom_perks[perk].perk_machine_set_kvps ]]( use_trigger, perk_machine, bump_trigger, collision );
        }
    }
}

givePoints()
{
	trigger = spawn( "trigger_radius", self.origin , 1, 50, 50 );
	while(1)
	{
		trigger waittill( "trigger", i );
		if ( i GetStance() == "prone" )
		{
			i.score += 100;
			i playsound( "zmb_cha_ching" );
			break;
		}
	}
   
}	

create_dvar( dvar, set )
{
    if( getDvar( dvar ) == "" )
		setDvar( dvar, set );
}
